package ${packagePath}.${moduleName}.controller;

import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import ${packagePath}.${moduleName}.domain.${tableInfo.upperClassName};
import ${packagePath}.${moduleName}.service.${tableInfo.upperClassName}Service;
import com.discardpast.louwailou.base.domain.Result;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;

/**
 * $!{tableInfo.comments}(${tableInfo.upperClassName})表控制层
 *
 * @author ${author}
 * @since ${datetime}
 */
@Api(value = "$!{tableInfo.comments}接口", tags = "$!{tableInfo.comments}模块")
@RestController
@RequestMapping("/${tableInfo.lowerClassName}")
public class ${tableInfo.upperClassName}Controller{

    @Resource
    private ${tableInfo.upperClassName}Service ${tableInfo.lowerClassName}Service;

    /**
     * 分页查询所有$!{tableInfo.comments}数据
     *
     * @param page 分页对象
     * @param ${tableInfo.lowerClassName} 查询实体
     * @return Result 返回统一结果model
     */
    @ApiOperation(value = "查询$!{tableInfo.comments}列表", notes = "查询$!{tableInfo.comments}列表", response = Result.class)
    @GetMapping
    public Result selectAll(Page<${tableInfo.upperClassName}> page, ${tableInfo.upperClassName} ${tableInfo.lowerClassName}) {
        return Result.success(this.${tableInfo.lowerClassName}Service.queryByPage(page,${tableInfo.lowerClassName}));
    }

    /**
     * 通过主键查询单条$!{tableInfo.comments}数据
     *
     * @param ${tableInfo.lowerClassName}Id 主键
     * @return Result 返回统一结果model
     */
    @ApiOperation(value = "查询$!{tableInfo.comments}", notes = "查询$!{tableInfo.comments}", response = Result.class)
    @GetMapping("{${tableInfo.lowerClassName}Id}")
    public Result selectOne(
            @ApiParam(name = "${tableInfo.lowerClassName}Id", value = "主键", required = true, example = "1")
            @PathVariable Long ${tableInfo.lowerClassName}Id) {
        return Result.success(this.${tableInfo.lowerClassName}Service.queryById(${tableInfo.lowerClassName}Id));
    }

    /**
     * 保存$!{tableInfo.comments}数据
     *
     * @param ${tableInfo.lowerClassName} 实体对象
     * @return Result 返回统一结果model
     */
    @ApiOperation(value = "保存$!{tableInfo.comments}", notes = "保存$!{tableInfo.comments}", response = Result.class)
    @PostMapping
    public Result insert(
            @ApiParam(name = "${tableInfo.lowerClassName}", value = "传入json格式", required = true)
            @RequestBody ${tableInfo.upperClassName} ${tableInfo.lowerClassName}) {
        return Result.success(this.${tableInfo.lowerClassName}Service.add${tableInfo.upperClassName}(${tableInfo.lowerClassName}));
    }

    /**
     * 修改$!{tableInfo.comments}数据
     *
     * @param ${tableInfo.lowerClassName} 实体对象
     * @return Result 返回统一结果model
     */
    @ApiOperation(value = "修改$!{tableInfo.comments}", notes = "修改$!{tableInfo.comments}", response = Result.class)
    @PutMapping
    public Result update(
            @ApiParam(name = "${tableInfo.lowerClassName}", value = "传入json格式", required = true)
            @RequestBody ${tableInfo.upperClassName} ${tableInfo.lowerClassName}) {
        return Result.success(this.${tableInfo.lowerClassName}Service.update${tableInfo.upperClassName}(${tableInfo.lowerClassName}));
    }

}